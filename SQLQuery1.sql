-- Create Database
CREATE DATABASE agriculture;
USE agriculture;
-- Create CROPS table
CREATE TABLE CROPS (
    CROP_CODE VARCHAR(6) PRIMARY KEY,
    CROP_NAME VARCHAR(40) NOT NULL UNIQUE,
    AVERAGE_YIELD INT DEFAULT 4,
    CHECK (AVERAGE_YIELD >= 0) -- Ensure the yield is non-negative
);

-- Insert Data into CROPS table
INSERT INTO CROPS (CROP_CODE, CROP_NAME) VALUES
('CRP100', 'Wheat'),
('CRP101', 'Rice'),
('CRP102', 'Maize'),
('CRP103', 'Sugarcane'),
('CRP104', 'Cotton'),
('CRP105', 'Tomato'),
('CRP106', 'Onion');

SELECT * FROM CROPS;

-- Create FARMERS table with constraints
CREATE TABLE FARMERS (
    FARMER_ID INT IDENTITY(1,1) PRIMARY KEY,  -- Use IDENTITY for auto-increment
    FIRST_NAME VARCHAR(50) NOT NULL,
    LAST_NAME VARCHAR(50) NOT NULL,
    AGE INT CHECK (AGE >= 18),
    VILLAGE VARCHAR(30),
    STATE VARCHAR(30) DEFAULT 'INDIA',
    AADHAAR_NO BIGINT UNIQUE,
    CROP_CODE VARCHAR(6),
    GENDER VARCHAR(10),
    FOREIGN KEY (CROP_CODE) REFERENCES CROPS(CROP_CODE) ON DELETE CASCADE
);

-- Insert Data into FARMERS
INSERT INTO FARMERS (FIRST_NAME, LAST_NAME, AGE, VILLAGE, AADHAAR_NO, CROP_CODE, GENDER) VALUES
('Ramesh', 'Yadav', 30, 'Rampur', 123456789012, 'CRP100', 'Male'),
('Sunita', 'Devi', 28, 'Lakhanpur', 234567890123, 'CRP101', 'Female'),
('Amit', 'Kumar', 35, 'Mirzapur', 345678901234, 'CRP102', 'Male'),
('Kavita', 'Singh', 26, 'Gorakhpur', 456789012345, 'CRP103', 'Female'),
('Mohit', 'Sharma', 29, 'Kanpur', 567890123456, 'CRP104', 'Male'),
('Sita', 'Verma', 22, 'Prayagraj', 678901234567, 'CRP101', 'Female'),
('Pooja', 'Arora', 23, 'Varanasi', 678901234568, 'CRP106', 'Female');

-- Select all data from FARMERS table
SELECT * FROM FARMERS;


-- Create CUSTOMERS table
CREATE TABLE CUSTOMERS (
    CUSTOMER_ID INT IDENTITY(1,1) PRIMARY KEY,  -- Use IDENTITY for auto-increment
    FIRST_NAME VARCHAR(50) NOT NULL,
    LAST_NAME VARCHAR(50) NOT NULL,
    EMAIL VARCHAR(100) UNIQUE,
    PHONE VARCHAR(15),
    GENDER VARCHAR(10),
    CREATED_AT DATETIME DEFAULT CURRENT_TIMESTAMP  -- Use DATETIME instead of TIMESTAMP for SQL Server
);

-- Insert Data into CUSTOMERS
INSERT INTO CUSTOMERS (FIRST_NAME, LAST_NAME, EMAIL, PHONE, GENDER) VALUES
('John', 'Doe', 'john.doe@example.com', '9876543210', 'Male'),
('Jane', 'Smith', 'jane.smith@example.com', '9876543211', 'Female');

-- Select all data from CUSTOMERS table
SELECT * FROM CUSTOMERS;

-- Create ORDERS table with foreign key constraint
CREATE TABLE ORDERS (
    ORDER_ID INT IDENTITY(1,1) PRIMARY KEY,  -- Use IDENTITY for auto-increment
    CUSTOMER_ID INT,
    ORDER_DATE DATETIME DEFAULT CURRENT_TIMESTAMP,  -- Use DATETIME instead of TIMESTAMP
    TOTAL_AMOUNT DECIMAL(10, 2),
    FOREIGN KEY (CUSTOMER_ID) REFERENCES CUSTOMERS(CUSTOMER_ID) ON DELETE CASCADE
);

-- Insert Data into ORDERS
INSERT INTO ORDERS (CUSTOMER_ID, TOTAL_AMOUNT) VALUES
(1, 250.75),
(2, 125.50);

-- Select all data from ORDERS table
SELECT * FROM ORDERS;

-- Update Gender for Specific Farmer
UPDATE FARMERS SET GENDER = 'Male' WHERE FARMER_ID = 1;
UPDATE FARMERS SET GENDER = 'Female' WHERE FARMER_ID = 2;

-- Drop Gender Column from FARMERS Table
ALTER TABLE FARMERS DROP COLUMN GENDER;

-- Rename FARMERS table to FARMERINFO
EXEC sp_rename 'FARMERS', 'FARMERINFO';

-- Rename COLUMN STATE to REGION in FARMERINFO table
EXEC sp_rename 'FARMERINFO.STATE', 'REGION', 'COLUMN';

-- Pattern Matching in FARMERINFO Table
SELECT * FROM FARMERINFO WHERE FIRST_NAME LIKE 'A%';
SELECT * FROM FARMERINFO WHERE LAST_NAME LIKE '%a';
SELECT * FROM FARMERINFO WHERE FIRST_NAME LIKE '%it%';

-- Logical Queries with AND, OR, and BETWEEN
SELECT * FROM FARMERINFO WHERE AGE >= 30 AND VILLAGE = 'Rampur';
SELECT * FROM FARMERINFO WHERE AGE = 30 OR VILLAGE = 'Rampur';
SELECT * FROM FARMERINFO WHERE AGE BETWEEN 25 AND 35;
SELECT * FROM FARMERINFO WHERE AGE IN (22, 28, 35);
SELECT * FROM FARMERINFO WHERE VILLAGE <> 'Kanpur';

-- Order by AGE
SELECT * FROM FARMERINFO ORDER BY AGE ASC;
SELECT * FROM FARMERINFO ORDER BY AGE ASC, FIRST_NAME DESC;

-- Aggregate Queries
SELECT COUNT(*) AS TotalFarmers FROM FARMERINFO;
SELECT AVG(AGE) AS AverageAge FROM FARMERINFO;
SELECT MAX(AGE) AS Oldest, MIN(AGE) AS Youngest FROM FARMERINFO;
SELECT VILLAGE, COUNT(*) AS Total FROM FARMERINFO GROUP BY VILLAGE;

-- Inner Join between FARMERINFO and CROPS
SELECT FARMERINFO.FARMER_ID, FARMERINFO.FIRST_NAME, CROPS.CROP_NAME
FROM FARMERINFO
INNER JOIN CROPS ON FARMERINFO.CROP_CODE = CROPS.CROP_CODE;

-- Left Join between FARMERINFO and CROPS
SELECT FARMERINFO.FARMER_ID, FARMERINFO.FIRST_NAME, CROPS.CROP_NAME
FROM FARMERINFO
LEFT JOIN CROPS ON FARMERINFO.CROP_CODE = CROPS.CROP_CODE;

-- Right Join between FARMERINFO and CROPS
SELECT FARMERINFO.FARMER_ID, FARMERINFO.FIRST_NAME, CROPS.CROP_NAME
FROM FARMERINFO
RIGHT JOIN CROPS ON FARMERINFO.CROP_CODE = CROPS.CROP_CODE;

-- String Functions

-- Convert FIRST_NAME to uppercase
SELECT UPPER(FIRST_NAME) AS UPPER_NAME 
FROM FARMERINFO;

-- Convert FIRST_NAME to lowercase
SELECT LOWER(FIRST_NAME) AS LOWER_NAME 
FROM FARMERINFO;

-- Get the length of FIRST_NAME
SELECT FIRST_NAME, LEN(FIRST_NAME) AS LENGTH_NAME 
FROM FARMERINFO;

-- Get the first 3 characters of FIRST_NAME
SELECT SUBSTRING(FIRST_NAME, 1, 3) AS SHORT_NAME 
FROM FARMERINFO;

-- Get the last 3 characters of FIRST_NAME
SELECT RIGHT(FIRST_NAME, 3) AS LAST3 
FROM FARMERINFO;

-- Concatenate FIRST_NAME and LAST_NAME
SELECT CONCAT(FIRST_NAME, ' ', LAST_NAME) AS FULL_NAME 
FROM FARMERINFO;

-- Replace 'Tomato' with 'Vegetable Tomato' in CROP_NAME
SELECT REPLACE(CROP_NAME, 'Tomato', 'Vegetable Tomato') 
FROM CROPS;

-- Find the position of the first occurrence of 'a' in FIRST_NAME
 SELECT CHARINDEX('a', FIRST_NAME) AS Position
FROM FARMERINFO;

-- Subqueries Examples
-- 1. Select farmers with age greater than the average age
SELECT * 
FROM FARMERINFO 
WHERE AGE > (SELECT AVG(AGE) FROM FARMERINFO);

-- 2. Select farmers from the same village as FARMER_ID = 1
SELECT * 
FROM FARMERINFO 
WHERE VILLAGE = (SELECT VILLAGE FROM FARMERINFO WHERE FARMER_ID = 1);

-- 3. Select farmers with the same CROP_CODE as FARMER_ID = 2
SELECT * 
FROM FARMERINFO 
WHERE CROP_CODE = (SELECT CROP_CODE FROM FARMERINFO WHERE FARMER_ID = 2);

-- 4. Select farmers with the minimum age
SELECT * 
FROM FARMERINFO 
WHERE AGE = (SELECT MIN(AGE) FROM FARMERINFO);

-- 5. Select farmers with the longest FIRST_NAME (use LEN instead of LENGTH)
SELECT * 
FROM FARMERINFO 
WHERE LEN(FIRST_NAME) = (SELECT MAX(LEN(FIRST_NAME)) FROM FARMERINFO);

-- 6. Select farmers from villages that have more than one farmer
SELECT * 
FROM FARMERINFO 
WHERE VILLAGE IN (SELECT VILLAGE FROM FARMERINFO GROUP BY VILLAGE HAVING COUNT(*) > 1);

-- 7. Select farmers whose CROP_CODE is NULL or not in the CROPS table
SELECT * 
FROM FARMERINFO 
WHERE CROP_CODE IS NULL OR CROP_CODE NOT IN (SELECT CROP_CODE FROM CROPS);

-- 8. Select farmers with an age less than the maximum age
SELECT * 
FROM FARMERINFO 
WHERE AGE < (SELECT MAX(AGE) FROM FARMERINFO);

-- 9. Select the second oldest farmer (age = max age where age < the max age)
SELECT * 
FROM FARMERINFO 
WHERE AGE = (SELECT MAX(AGE) FROM FARMERINFO WHERE AGE < (SELECT MAX(AGE) FROM FARMERINFO));